package testnet

import (
	"encoding/json"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/pkg/errors"
	"github.com/prysmaticlabs/prysm/v5/cmd/prysmctl/testnet/utils"
	"github.com/prysmaticlabs/prysm/v5/config/params"
	"github.com/prysmaticlabs/prysm/v5/io/file"
	"github.com/urfave/cli/v2"
	"os"
	"strconv"
)

var (
	depositAddress      = common.HexToAddress("4242424242424242424242424242424242424242")
	depositInGenesisCmd = &cli.Command{
		Name:  "deposit-in-genesis",
		Usage: "validators deposit in a contract precompiled in genesis",
		Action: func(cliCtx *cli.Context) error {
			if err := cliActionDepositInGenesis(); err != nil {
				log.WithError(err).Fatal("Could not deposit in genesis")
			}
			return nil
		},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:        "chain-config-file",
				Destination: &generateGenesisStateFlags.ChainConfigFile,
				Usage:       "The path to a YAML file with chain config values",
			},
			&cli.StringFlag{
				Name:        "geth-genesis-json-in",
				Destination: &generateGenesisStateFlags.GethGenesisJsonIn,
				Usage:       "Path to a \"genesis.json\" file, containing a json representation of Geth's core.Genesis",
			},
			&cli.StringFlag{
				Name:        "geth-genesis-json-out",
				Destination: &generateGenesisStateFlags.GethGenesisJsonOut,
				Usage:       "Path to write generated \"genesis.json\" file, containing a json representation of Geth's core.Genesis",
			},
			&cli.StringFlag{
				Name:        "deposit-json-file",
				Destination: &generateGenesisStateFlags.DepositJsonFile,
				Usage:       "Path to deposit_data.json file generated by the staking-deposit-cli tool for optionally specifying validators in genesis state",
			},
		},
	}
)

func cliActionDepositInGenesis() error {
	if err := setGlobalParams(); err != nil {
		return fmt.Errorf("could not set config params: %v", err)
	}
	f := &generateGenesisStateFlags
	t := utils.NewMerkleTree(int(params.BeaconConfig().DepositContractTreeDepth))

	if f.DepositJsonFile == "" || f.GethGenesisJsonIn == "" {
		return fmt.Errorf("no deposit file or genesis file provided")
	}
	roots, err := parseDepositFile(f.DepositJsonFile)
	if err != nil {
		return errors.Wrap(err, "unable to parse deposit file")
	}
	for index, depositDataRoot := range roots {
		t.AddValue(index, [32]byte(depositDataRoot))
	}
	gethGenesis, err := parseGethGensis(f.GethGenesisJsonIn)
	if err != nil {
		return errors.Wrap(err, "unable to parse genesis file")
	}

	for index, branchData := range t.GetBranches() {
		gethGenesis.Alloc[depositAddress].Storage[common.HexToHash(strconv.FormatInt(int64(index), 16))] = common.BytesToHash(branchData[:])
	}

	depositCount := strconv.FormatInt(int64(len(roots)), 16)
	gethGenesis.Alloc[depositAddress].Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000020")] = common.HexToHash(depositCount)

	if f.GethGenesisJsonOut != "" {
		gbytes, err := json.MarshalIndent(gethGenesis, "", "\t")
		if err != nil {
			return errors.Wrapf(err, "failed to marshal geth genesis")
		}
		if err := os.WriteFile(f.GethGenesisJsonOut, gbytes, os.ModePerm); err != nil {
			return errors.Wrapf(err, "failed to write %s", f.GethGenesisJsonOut)
		}
	}

	return nil
}

func parseDepositFile(depositJsonFile string) (depositDataRoots [][]byte, err error) {
	expanded, err := file.ExpandPath(depositJsonFile)
	if err != nil {
		return nil, err
	}
	log.Printf("reading deposits from JSON at %s\n", expanded)
	b, err := os.ReadFile(expanded) // #nosec G304
	if err != nil {
		return nil, err
	}
	roots, _, err := depositEntriesFromJSON(b)
	return roots, err
}

func parseGethGensis(gethGenesisFile string) (*core.Genesis, error) {
	expanded, err := file.ExpandPath(gethGenesisFile)
	if err != nil {
		return nil, err
	}
	log.Printf("reading geth genesis from JSON at %s", expanded)
	b, err := os.ReadFile(expanded) // #nosec G304
	if err != nil {
		return nil, err
	}
	var genesisJSON *core.Genesis
	if err := json.Unmarshal(b, &genesisJSON); err != nil {
		return nil, err
	}
	allocDefaultStorageForDepositContract(genesisJSON)
	return genesisJSON, err
}

func allocDefaultStorageForDepositContract(genesisJSON *core.Genesis) {
	alloc := genesisJSON.Alloc[depositAddress]
	if genesisJSON.Alloc[depositAddress].Storage == nil || len(genesisJSON.Alloc[depositAddress].Storage) < 65 {
		alloc.Storage = make(map[common.Hash]common.Hash, 65)
	}
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000021")] = common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000000")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000022")] = common.HexToHash("0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000023")] = common.HexToHash("0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000024")] = common.HexToHash("0xc78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000025")] = common.HexToHash("0x536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000026")] = common.HexToHash("0x9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000027")] = common.HexToHash("0xd88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa1")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000028")] = common.HexToHash("0x87eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000029")] = common.HexToHash("0x26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000002a")] = common.HexToHash("0x506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000002b")] = common.HexToHash("0xffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000002c")] = common.HexToHash("0x6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000002d")] = common.HexToHash("0xb7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5f")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000002e")] = common.HexToHash("0xdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85e")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000002f")] = common.HexToHash("0xb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000030")] = common.HexToHash("0xd49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000031")] = common.HexToHash("0x8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000032")] = common.HexToHash("0x8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000033")] = common.HexToHash("0x95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000034")] = common.HexToHash("0xf893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17f")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000035")] = common.HexToHash("0xcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000036")] = common.HexToHash("0x8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9c")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000037")] = common.HexToHash("0xfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000038")] = common.HexToHash("0xe71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d7")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000039")] = common.HexToHash("0x31206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc0")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000003a")] = common.HexToHash("0x21352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000003b")] = common.HexToHash("0x619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000003c")] = common.HexToHash("0x7cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000003d")] = common.HexToHash("0x848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe1")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000003e")] = common.HexToHash("0x8869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636")
	alloc.Storage[common.HexToHash("0x000000000000000000000000000000000000000000000000000000000000003f")] = common.HexToHash("0xb5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c")
	alloc.Storage[common.HexToHash("0x0000000000000000000000000000000000000000000000000000000000000040")] = common.HexToHash("0x985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7")
	genesisJSON.Alloc[depositAddress] = alloc
}
